# 프로젝트 이름
spring.application.name=road

# ✅ DB 설정
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# ✅ OAuth2 - Naver
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,birthyear,birthday,mobile
spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# ✅ OAuth2 - Kakao
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.provider=kakao
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# ✅ OAuth2 - Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# ✅ 로그인 성공 후 이동할 기본 경로
spring.security.oauth2.client.login.default-success-url=/register/oauth2

# ✅ 지도/교통 API 키
naver.map.client-id=${NAVER_MAP_CLIENT_ID}
naver.map.client-secret=${NAVER_MAP_CLIENT_SECRET}
kakao.rest-api-key=${KAKAO_REST_API_KEY}
its.api.key=${ITS_API_KEY}
seoul.bus.api-key=${SEOUL_BUS_API_KEY}
seoul.city.parking.api-key=${SEOUL_CITY_PARKING_API_KEY}

# ✅ 날씨 API 키
kma.api.key=${KMA_API_KEY}

# ✅ 정적 리소스 경로 (내부 static + 외부 이미지)
spring.web.resources.static-locations=classpath:/static/,file:/C:/project/upload/images/

# ✅ 업로드 설정
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB

# ✅ Tomcat 대용량 요청 설정
server.tomcat.max-swallow-size=10MB

# ✅ Thymeleaf 설정
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# ✅ SMTP 설정 (Gmail)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# ✅ 서버 기본 설정
server.address=0.0.0.0
server.port=8080
server.servlet.context-path=

# ✅ 비동기 요청 타임아웃
spring.web.servlet.async.request-timeout=30000

# ✅ HikariCP 설정
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.leak-detection-threshold=20000

# ✅ IPv4 우선 사용 설정 (DNS 타임아웃 방지)
java.net.preferIPv4Stack=true

# ✅ 로깅 디버깅 설정 (필요 시 주석 해제)
# logging.level.org.springframework.security=DEBUG
# logging.level.org.springframework.web=DEBUG

